/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { a } from "@react-spring/three";
import omphalesScene from "../assets/3d/omphales.glb";

const Omphales = ({ isRotating, setIsRotating, setCurrentStage, ...props }) => {
  const omphalesRef = useRef();
  const { gl, viewport } = useThree();
  const { nodes, materials } = useGLTF(omphalesScene);

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  // Pointer Down Event
  const handlePointerDown = (e) => {
    e.stopPropagation();
    setIsRotating(true);

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    lastX.current = clientX;
  };

  // Pointer Up Event
  const handlePointerUp = (e) => {
    e.stopPropagation();
    setIsRotating(false);
  };

  // Pointer Move Event
  const handlePointerMove = (e) => {
    e.stopPropagation();
    if (isRotating) {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;
      const delta = (clientX - lastX.current) / viewport.width;

      omphalesRef.current.rotation.y += delta * Math.PI * 0.01;
      lastX.current = clientX;
      rotationSpeed.current = delta * Math.PI * 0.01;
    }
  };

  // Key Down Event
  const handleKeyDown = (e) => {
    if (e.key === "ArrowLeft" || e.key === "ArrowRight") {
      setIsRotating(true);
      const direction = e.key === "ArrowLeft" ? 1 : -1;
      omphalesRef.current.rotation.y += direction * Math.PI * 0.01;
    }
  };

  // Key Up Event
  const handleKeyUp = (e) => {
    if (e.key === "ArrowLeft" || e.key === "ArrowRight") {
      setIsRotating(false);
    }
  };

  // Animation Frame
  useFrame(() => {
    if (!isRotating) {
      rotationSpeed.current *= dampingFactor;
      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }
      omphalesRef.current.rotation.y += rotationSpeed.current;
    }

    // Update stage based on rotation
    const rotation = omphalesRef.current.rotation.y;
    const normalizedRotation = ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

    switch (true) {
      case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
        setCurrentStage(4);
        break;
      case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
        setCurrentStage(3);
        break;
      case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
        setCurrentStage(2);
        break;
      case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
        setCurrentStage(1);
        break;
      default:
        setCurrentStage(null);
    }
  });

  // Event Listeners
  useEffect(() => {
    const canvas = gl.domElement;

    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointerup", handlePointerUp);
    canvas.addEventListener("pointermove", handlePointerMove);
    document.addEventListener("keydown", handleKeyDown);
    document.addEventListener("keyup", handleKeyUp);

    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);
      document.removeEventListener("keydown", handleKeyDown);
      document.removeEventListener("keyup", handleKeyUp);
    };
  }, [gl, isRotating]);

  // Render
  return (
    <a.group ref={omphalesRef} {...props}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={1.17}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_2.geometry}
          material={materials["Scene_-_Root"]}
        />
      </group>
    </a.group>
  );
};

export default Omphales;
